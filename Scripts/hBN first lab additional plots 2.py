import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

WDX_Energy = np.array([5,7,10,15])

L2B = np.array([44.36,69.70,72.16,31.43])
L2C = np.array([50.04,69.47,72.44,33.81])
L2N = np.array([85.93,104.86,106.58,55.05])

L1N = np.array([12.91,19.22,23.23,12.45])
L1O = np.array([0,23.43,24.27,274.72])

PET_Al = np.array([0,2,3.87,547.00])

EDX_Energy = np.array([10,15])
EDX_Energy2 = np.array([2,3,5,7,10,12,15])

EDX_CutOff = np.array([6.64,11.76])
EDX_CutOff1 = np.array([7.47,13.21])

# EDX_CutOff2_1 = [4.09,3.32,4.37,4.23,5.38,6.29,7.74]
# EDX_CutOff2_10 = [2.77,3.08,4.10,3.82,4.86,5.62,6.87]

EDX_CutOff2_1 = np.array([1.95,2.99,4.28,4.23,5.38,6.29,7.74])
EDX_CutOff2_10 = np.array([1.90,2.90,4.06,3.82,4.86,5.62,6.87])

DeltaEDX1 = EDX_Energy2 - EDX_CutOff2_1
DeltaEDX10 = EDX_Energy2 - EDX_CutOff2_10

Ray_AbsorbAl_100 = np.array([0,0,0.01,56.26,220.75,432.55,673.06,927.74,1199.55,1491.61,1787.58,2090.16,2394.36,2711.28,3030.95,3368.29,3693.88,4033.73,4396.11,4740.12])
Ray_DetectAl_100 = np.array([0,0,0.01,54.21,210.16,405.74,620.56,838.62,1060.82,1287.84,1504.70,1710.59,1904.53,2091.31,2260.35,2430.87,2575.75,2709.04,2847.08,2948.85])
Ray_AbsorbB_100 = np.array([6.44,20.03,31.63,28.05,23.11,19.63,17.04,15.26,13.70,12.39,11.39,10.47,9.85,9.45,8.64,8.27,8.00,7.51,7.20,6.98])
Ray_DetectB_100 = np.array([6.30,18.55,27.51,24.11,19.89,16.95,14.74,13.23,11.88,10.75,9.90,9.09,8.56,8.22,7.51,7.19,6.95,6.53,6.26,6.07])
Ray_AbsorbN_100 = np.array([20.91,104.11,196.81,195.00,168.96,148.12,131.49,119.74,109.13,99.65,92.50,85.83,81.24,78.35,72.20,69.38,67.29,63.83,61.10,59.32])
Ray_DetectN_100 = np.array([20.55,97.17,172.26,168.10,145.63,128.03,113.80,103.81,94.67,86.49,80.38,74.55,70.63,68.11,62.77,60.35,58.51,55.51,53.14,51.59])
Ray_AbsorbO_100 = np.array([0,0,17.77,190.48,418.81,648.92,883.05,1112.55,1348.80,1595.67,1837.36,2079.35,2316.32,2561.41,2806.15,3062.00,3304.15,3556.07,3826.63,4076.96])
Ray_DetectO_100 = np.array([0,0,10.82,111.61,232.91,339.19,430.29,501.33,558.66,604.32,653.13,650.93,658.97,659.23,647.98,641.46,626.76,607.64,593.82,569.75])

Ray_AbsorbAl_50 = np.array([0,0,23.56,145.87,322.62,533.17,769.57,1019.54,1284.78,1569.57,1860.14,2155.48,2468.25,2782.34,3094.21,3428.21,3753.80,4098.46,4440.21,4804.67])
Ray_DetectAl_50 = np.array([0,0,22.82,141.66,309.31,503.43,713.82,926.91,1142.84,1362.15,1573.74,1775.62,1973.63,2157.04,2324.20,2487.70,2631.23,2769.55,2892.95,2999.75])
Ray_AbsorbB_50 = np.array([6.43,18.07,15.73,12.43,10.52,9.05,7.88,7.09,6.42,5.69,5.41,5.04,4.71,4.41,4.17,3.97,3.82,3.64,3.49,3.32])
Ray_DetectB_50 = np.array([6.29,16.87,14.58,11.54,9.78,8.42,7.34,6.60,5.98,5.30,5.04,4.69,4.39,4.11,3.89,3.70,3.56,3.39,3.25,3.09])
Ray_AbsorbN_50 = np.array([20.88,98.23,103.93,88.44,77.92,68.88,61.37,56.00,51.41,46.08,44.06,41.43,38.95,36.68,34.94,33.38,32.31,30.80,29.65,28.25])
Ray_DetectN_50 = np.array([20.52,92.12,96.49,82.15,72.47,64.10,57.15,52.15,47.88,42.93,41.06,38.61,36.29,34.18,32.56,31.10,30.01,28.70,27.63,26.33])
Ray_AbsorbO_50 = np.array([0,5.01,141.35,339.57,544.14,756.48,978.68,1199.46,1425.28,1663.32,1898.01,2131.76,2377.65,2619.90,2855.45,3108.26,3349.86,3607.46,3857.10,4127.38])
Ray_DetectO_50 = np.array([0,3.91,107.04,246.08,373.35,487.41,586.92,665.08,727.25,774.48,806.72,826.57,833.45,830.61,820.66,804.09,785.98,764.66,741.88,710.82])

Ray_AbsorbAl_150 = np.array([0,0,0,6.70,118.41,323.36,567.18,831.37,1106.72,1409.26,1711.43,2013.77,2329.38,2648.80,2962.60,3305.48,3631.11,3982.93,4326.40,4696.18,])
Ray_DetectAl_150 = np.array([0,0,0,6.40,111.84,301.13,519.54,746.91,973.03,1209.79,1431.66,1638.13,1842.17,2032.53,2200.77,2373.07,2513.03,2659.09,2779.89,2897.48])
Ray_AbsorbB_150 = np.array([6.44,19.99,35.53,43.04,37.20,31.40,27.29,23.98,21.69,19.38,17.48,16.26,15.35,14.31,13.76,12.92,12.33,11.68,11.25,10.69])
Ray_DetectB_150 = np.array([6.29,18.50,30.37,34.66,29.67,25.12,21.90,19.30,17.50,15.65,14.13,13.18,12.45,11.61,11.17,10.49,10.01,9.49,9.14,8.69])
Ray_AbsorbN_150 = np.array([20.89,103.88,213.44,289.79,268.57,235.38,209.33,187.58,171.75,155.26,141.57,133.01,126.25,118.45,114.41,107.93,103.61,98.67,95.15,90.71])
Ray_DetectN_150 = np.array([20.52,96.95,184.53,235.01,215.00,188.68,168.21,151.08,138.62,125.47,114.54,107.85,102.42,96.12,92.90,87.65,84.16,80.23,77.33,73.76])
Ray_AbsorbO_150 = np.array([0,0,0.01,60.11,273.79,523.80,773.60,1021.85,1263.41,1523.05,1773.05,2015.73,2264.58,2512.91,2750.89,3012.52,3254.97,3518.05,3771.57,4026.45])
Ray_DetectO_150 = np.array([0,0,0,28.31,123.05,221.50,305.73,373.73,424.86,468.11,495.93,510.48,521.38,524.23,517.82,510.69,495.42,484.17,467.72,453.25])

Ray_AbsorbAl_200 = np.array([0,0,0,0.01,43.31,214.46,453.82,724.70,1004.51,1322.22,1628.55,1936.70,2249.50,2573.57,2895.99,3238.39,3570.42,3917.07,4261.61,4628.86])
Ray_DetectAl_200 = np.array([0,0,0,0.01,40.54,198.18,412.81,646.76,877.80,1128.30,1354.43,1567.11,1768.83,1963.08,2137.60,2311.64,2457.30,2601.30,2726.82,2844.39])
Ray_AbsorbB_200 = np.array([6.44,20.04,35.45,51.06,51.17,44.42,38.51,33.58,30.51,26.59,24.19,22.60,21.16,19.67,18.83,17.66,16.84,15.94,15.39,14.49])
Ray_DetectB_200 = np.array([6.30,18.55,30.31,39.56,38.11,32.91,28.63,25.07,22.88,19.97,18.23,17.08,16.01,14.89,14.27,13.40,12.80,12.12,11.71,11.02])
Ray_AbsorbN_200 = np.array([20.90,104.14,213.02,333.16,362.95,329.85,293.68,261.39,240.78,212.67,195.49,184.06,173.54,162.59,156.24,147.27,141.23,134.26,130.07,122.95])
Ray_DetectN_200 = np.array([20.54,97.16,184.19,261.54,272.19,245.39,218.88,195.41,180.72,159.87,147.44,139.22,131.34,123.18,118.43,111.75,107.38,102.11,98.88,93.52])
Ray_AbsorbO_200 = np.array([0,0,0,4.43,141.82,387.57,650.81,916.26,1167.23,1447.04,1702.00,1950.61,2197.50,2451.45,2698.38,2959.52,3208.34,3467.10,3721.43,3992.92])
Ray_DetectO_200 = np.array([0,0,0,1.66,51.26,132.44,208.28,271.42,318.49,360.81,386.02,401.24,409.75,413.60,409.71,405.73,394.21,385.43,374.33,360.65])

Ray_AbsorbAl_250 = np.array([0,0,0,0,6.71,120.25,342.16,616.75,901.72,1216.68,1544.41,1850.65,2168.70,2494.73,2826.38,3163.59,3507.13,3857.43,4209.92,4570.23])
Ray_DetectAl_250 = np.array([0,0,0,0,6.22,110.28,308.79,546.68,782.68,1031.81,1277.09,1488.90,1695.19,1888.50,2075.58,2244.53,2402.74,2543.09,2674.84,2792.23])
Ray_AbsorbB_250 = np.array([6.46,20.02,35.48,52.12,62.39,57.29,50.20,43.73,39.42,35.09,31.28,29.31,27.20,25.45,24.18,22.74,21.34,20.25,19.51,18.69])
Ray_DetectB_250 = np.array([6.31,18.53,30.32,40.20,44.17,39.60,34.62,30.26,27.46,24.52,21.93,20.62,19.20,18.00,17.11,16.16,15.15,14.40,13.89,13.31])
Ray_AbsorbN_250 = np.array([20.93,104.03,213.16,337.46,433.07,420.98,380.98,338.88,310.29,279.99,252.02,238.15,222.60,209.80,200.40,189.40,178.77,170.36,164.58,158.39])
Ray_DetectN_250 = np.array([20.56,97.08,184.28,264.23,310.22,293.03,263.87,235.22,216.53,195.82,176.89,167.63,157.25,148.50,141.84,134.60,126.99,121.27,117.17,112.83])
Ray_AbsorbO_250 = np.array([0,0,0,0.03,45.09,256.28,525.12,806.10,1070.06,1350.06,1629.22,1876.31,2129.81,2386.14,2642.44,2899.08,3159.65,3421.79,3681.73,3947.70])
Ray_DetectO_250 = np.array([0,0,0,0.01,13.05,70.58,135.59,193.39,236.27,272.74,299.95,312.80,321.25,323.47,325.21,320.37,314.65,305.52,297.15,287.40])

Ray_AbsorbAl_300 = np.array([0,0,0,0,0.16,51.40,237.16,500.61,798.17,1118.01,1450.67,1766.60,2097.08,2421.39,2751.10,3085.23,3440.02,3786.76,4156.77,4511.40])
Ray_DetectAl_300 = np.array([0,0,0,0,0.14,46.66,212.24,440.35,687.80,941.72,1191.50,1412.55,1629.09,1824.37,2009.32,2174.61,2339.38,2487.92,2623.09,2742.64])
Ray_AbsorbB_300 = np.array([6.45,19.99,35.40,52.13,67.75,69.15,61.65,54.66,48.34,43.19,38.43,35.97,32.96,31.34,29.59,27.85,26.34,25.09,23.42,22.59])
Ray_DetectB_300 = np.array([6.31,18.50,30.27,40.24,46.56,44.98,39.83,35.14,31.30,28.04,25.11,23.62,21.72,20.73,19.60,18.48,17.49,16.68,15.63,15.08])
Ray_AbsorbN_300 = np.array([20.93,103.90,212.72,337.49,462.56,501.64,467.05,422.02,379.68,343.79,309.39,291.68,269.69,257.83,244.81,231.79,220.21,210.80,197.22,191.32])
Ray_DetectN_300 = np.array([20.56,96.94,183.98,264.43,323.28,329.76,302.34,272.56,246.60,223.61,202.42,191.73,177.91,170.60,162.34,153.94,146.36,140.23,132.00,127.78])
Ray_AbsorbO_300 = np.array([0,0,0,0,5.86,141.21,397.79,683.28,971.04,1259.95,1546.76,1805.34,2071.96,2325.97,2580.78,2836.49,3106.53,3365.93,3643.54,3904.00])
Ray_DetectO_300 = np.array([0,0,0,0,1.35,31.22,82.73,132.26,173.21,205.87,229.88,243.64,252.85,256.25,257.16,252.90,248.62,244.13,235.94,230.00])

BeamEnergy = np.arange(1,21,1)


plt.figure(1)
plt.title('LDEL2 Intensites (Normalised)')
plt.xlabel('Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(WDX_Energy,(L2B/max(L2B)), label = 'B', marker = 'x')
plt.plot(WDX_Energy,(L2N/max(L2N)), label = 'N', marker = 'o')
plt.plot(WDX_Energy,(L2C/max(L2C)), label = 'C', marker = 's')
plt.legend()
plt.xticks(np.arange(5,16,1))

plt.figure(2)
plt.title('LDEL1 Intensites (Normalised)')
plt.xlabel('Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(WDX_Energy,(L1N/max(L1N)), label = 'N', marker = 'x')
plt.plot(WDX_Energy,(L1O/max(L1O)), label = 'O', marker = 'o')
plt.legend()
plt.xticks(np.arange(5,16,1))


plt.figure(3)
plt.title('PETJ Intensites (Normalised)')
plt.xlabel('Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(WDX_Energy,(PET_Al/max(PET_Al)), label = 'Al', marker = 'x')
plt.legend()
plt.xticks(np.arange(5,16,1))

plt.figure(30)
plt.title('PETJ Intensites (Normalised)')
plt.xlabel('Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.semilogy(WDX_Energy,(PET_Al/max(PET_Al)), label = 'Al', marker = 'x')
plt.legend()
plt.xticks(np.arange(5,16,1))

plt.figure(4)
plt.title('Nitrogen Intensites by crystal (Normalised)')
plt.xlabel('Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(WDX_Energy,(L2N / max(L2N)), label = 'LDEL2', marker = 'x')
plt.plot(WDX_Energy,(L1N / max(L1N)), label = 'LDEL1', marker = 'o')
plt.legend()
plt.xticks(np.arange(5,16,1))

xGen = np.linspace(0,20,10001)
m, c, r, p, std_err = stats.linregress(EDX_Energy2,EDX_CutOff2_1)
yGen = m * xGen + c

m1, c1, r1, p1, std_err1 = stats.linregress(EDX_Energy2,EDX_CutOff2_10)
yGen1 = m1 * xGen + c1


plt.figure(5)
plt.title('CutOff Energy for EDX')
plt.xlabel('Incident Beam Energy (keV)')
plt.ylabel('Energy where detector reaches CutOff value (keV)')
plt.scatter(EDX_Energy2,EDX_CutOff2_1, label = 'Experemental Data, CutOff set at I_arb = 1')
plt.scatter(EDX_Energy2,EDX_CutOff2_10, label = 'Experemental Data, CutOff set at I_arb = 10')
plt.plot(xGen,yGen, label = 'Line Fit: m = '+str(np.around(m,3))+', c = '+str(np.around(c,3)), linestyle = ':')
plt.plot(xGen,yGen1, label = 'Line Fit:  m = '+str(np.around(m1,3))+', c = '+str(np.around(c1,3)), linestyle = ':')
plt.legend(loc = 'best',fontsize="small")

p13 = np.poly1d(np.polyfit(EDX_Energy2,EDX_CutOff2_1,3))
p103 = np.poly1d(np.polyfit(EDX_Energy2,EDX_CutOff2_10,3))
p15 = np.poly1d(np.polyfit(EDX_Energy2,EDX_CutOff2_1,5))
p105 = np.poly1d(np.polyfit(EDX_Energy2,EDX_CutOff2_10,5))
p17 = np.poly1d(np.polyfit(EDX_Energy2,EDX_CutOff2_1,7))
p107 = np.poly1d(np.polyfit(EDX_Energy2,EDX_CutOff2_10,7))

plt.figure(51)
plt.title('CutOff Energy for EDX')
plt.xlabel('Incident Beam Energy (keV)')
plt.ylabel('Energy where detector reaches CutOff value (keV)')
plt.scatter(EDX_Energy2,EDX_CutOff2_1, label = 'Experemental Data, CutOff set at I_arb = 1')
plt.scatter(EDX_Energy2,EDX_CutOff2_10, label = 'Experemental Data, CutOff set at I_arb = 10')
plt.plot(xGen,p13(xGen), label = '3rd Order Polynomial Fit \n' 'At x = 0 , y = '+ str(np.around(p13(0),3)))
plt.plot(xGen,p103(xGen), label = '3rd Order Polynomial Fit \n' 'At x = 0 , y = '+ str(np.around(p103(0),3)))
plt.legend(loc = 'best',fontsize="small")

plt.figure(52)
plt.title('CutOff Energy for EDX')
plt.xlabel('Incident Beam Energy (keV)')
plt.ylabel('Energy where detector reaches CutOff value (keV)')
plt.scatter(EDX_Energy2,EDX_CutOff2_1, label = 'Experemental Data, CutOff set at I_arb = 1')
plt.scatter(EDX_Energy2,EDX_CutOff2_10, label = 'Experemental Data, CutOff set at I_arb = 10')
plt.plot(xGen,p15(xGen), label = '5th Order Polynomial Fit \n' 'At x = 0 , y = '+ str(np.around(p15(0),3)))
plt.plot(xGen,p105(xGen), label = '5th Order Polynomial Fit \n' 'At x = 0 , y = '+ str(np.around(p105(0),3)))
plt.legend(loc = 'best',fontsize="small")

plt.figure(54)
plt.title('CutOff Energy for EDX')
plt.xlabel('Incident Beam Energy (keV)')
plt.ylabel('Energy where detector reaches CutOff value (keV)')
plt.scatter(EDX_Energy2,EDX_CutOff2_1, label = 'Experemental Data, CutOff set at I_arb = 1')
plt.scatter(EDX_Energy2,EDX_CutOff2_10, label = 'Experemental Data, CutOff set at I_arb = 10')
plt.plot(xGen,p17(xGen), label = '7th Order Polynomial Fit \n' 'At x = 0 , y = '+ str(np.around(p17(0),3)))
plt.plot(xGen,p107(xGen), label = '7th Order Polynomial Fit \n' 'At x = 0 , y = '+ str(np.around(p107(0),3)))
plt.legend(loc = 'best',fontsize="small")


plt.figure(6)
plt.title('Detection of X-Rays 1 (50nm) (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_AbsorbAl_50 / max(Ray_AbsorbAl_50)), label = 'I_emit (Al)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectAl_50 / max(Ray_DetectAl_50)), label = 'I_detected (Al)', marker = 'x')
plt.plot(BeamEnergy,(Ray_AbsorbO_50 / max(Ray_AbsorbO_50)), label = 'I_emit (O)', marker = 'o')
plt.plot(BeamEnergy,(Ray_DetectO_50 / max(Ray_DetectO_50)), label = 'I_detected (O)', marker = 'o')
plt.legend()

plt.figure(61)
plt.title('Detection of X-Rays 1 (100nm) (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_AbsorbAl_100 / max(Ray_AbsorbAl_100)), label = 'I_emit (Al)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectAl_100 / max(Ray_DetectAl_100)), label = 'I_detected (Al)', marker = 'x')
plt.plot(BeamEnergy,(Ray_AbsorbO_100 / max(Ray_AbsorbO_100)), label = 'I_emit (O)', marker = 'o')
plt.plot(BeamEnergy,(Ray_DetectO_100 / max(Ray_DetectO_100)), label = 'I_detected (O)', marker = 'o')
plt.legend()

plt.figure(62)
plt.title('Detection of X-Rays 1 (150nm) (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_AbsorbAl_150 / max(Ray_AbsorbAl_150)), label = 'I_emit (Al)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectAl_150 / max(Ray_DetectAl_150)), label = 'I_detected (Al)', marker = 'x')
plt.plot(BeamEnergy,(Ray_AbsorbO_150 / max(Ray_AbsorbO_150)), label = 'I_emit (O)', marker = 'o')
plt.plot(BeamEnergy,(Ray_DetectO_150 / max(Ray_DetectO_150)), label = 'I_detected (O)', marker = 'o')
plt.legend()

plt.figure(63)
plt.title('Detection of X-Rays 1 (200nm) (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_AbsorbAl_200 / max(Ray_AbsorbAl_200)), label = 'I_emit (Al)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectAl_200 / max(Ray_DetectAl_200)), label = 'I_detected (Al)', marker = 'x')
plt.plot(BeamEnergy,(Ray_AbsorbO_200 / max(Ray_AbsorbO_200)), label = 'I_emit (O)', marker = 'o')
plt.plot(BeamEnergy,(Ray_DetectO_200 / max(Ray_DetectO_200)), label = 'I_detected (O)', marker = 'o')
plt.legend()

plt.figure(64)
plt.title('Detection of X-Rays 1 (250nm) (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_AbsorbAl_250 / max(Ray_AbsorbAl_250)), label = 'I_emit (Al)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectAl_250 / max(Ray_DetectAl_250)), label = 'I_detected (Al)', marker = 'x')
plt.plot(BeamEnergy,(Ray_AbsorbO_250 / max(Ray_AbsorbO_250)), label = 'I_emit (O)', marker = 'o')
plt.plot(BeamEnergy,(Ray_DetectO_250 / max(Ray_DetectO_250)), label = 'I_detected (O)', marker = 'o')
plt.legend()

plt.figure(65)
plt.title('Detection of X-Rays 1 (300nm) (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_AbsorbAl_300 / max(Ray_AbsorbAl_300)), label = 'I_emit (Al)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectAl_300 / max(Ray_DetectAl_300)), label = 'I_detected (Al)', marker = 'x')
plt.plot(BeamEnergy,(Ray_AbsorbO_300 / max(Ray_AbsorbO_300)), label = 'I_emit (O)', marker = 'o')
plt.plot(BeamEnergy,(Ray_DetectO_300 / max(Ray_DetectO_300)), label = 'I_detected (O)', marker = 'o')
plt.legend()

plt.figure(7)
plt.title('Detection of X-Rays 2 (50nm) (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_AbsorbB_50 / max(Ray_AbsorbB_50)), label = 'I_emit (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectB_50 / max(Ray_DetectB_50)), label = 'I_detected (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_AbsorbN_50 / max(Ray_AbsorbN_50)), label = 'I_emit (N)', marker = 'o')
plt.plot(BeamEnergy,(Ray_DetectN_50 / max(Ray_DetectN_50)), label = 'I_detected (N)', marker = 'o')
plt.legend()

plt.figure(71)
plt.title('Detection of X-Rays 2 (100nm) (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_AbsorbB_100 / max(Ray_AbsorbB_100)), label = 'I_emit (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectB_100 / max(Ray_DetectB_100)), label = 'I_detected (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_AbsorbN_100 / max(Ray_AbsorbN_100)), label = 'I_emit (N)', marker = 'o')
plt.plot(BeamEnergy,(Ray_DetectN_100 / max(Ray_DetectN_100)), label = 'I_detected (N)', marker = 'o')
plt.legend()

plt.figure(72)
plt.title('Detection of X-Rays 2 (150nm) (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_AbsorbB_150 / max(Ray_AbsorbB_150)), label = 'I_emit (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectB_150 / max(Ray_DetectB_150)), label = 'I_detected (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_AbsorbN_150 / max(Ray_AbsorbN_150)), label = 'I_emit (N)', marker = 'o')
plt.plot(BeamEnergy,(Ray_DetectN_150 / max(Ray_DetectN_150)), label = 'I_detected (N)', marker = 'o')
plt.legend()

plt.figure(73)
plt.title('Detection of X-Rays 2 (200nm) (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_AbsorbB_200 / max(Ray_AbsorbB_200)), label = 'I_emit (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectB_200 / max(Ray_DetectB_200)), label = 'I_detected (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_AbsorbN_200 / max(Ray_AbsorbN_200)), label = 'I_emit (N)', marker = 'o')
plt.plot(BeamEnergy,(Ray_DetectN_200 / max(Ray_DetectN_200)), label = 'I_detected (N)', marker = 'o')
plt.legend()

plt.figure(74)
plt.title('Detection of X-Rays 2 (250nm) (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_AbsorbB_250 / max(Ray_AbsorbB_250)), label = 'I_emit (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectB_250 / max(Ray_DetectB_250)), label = 'I_detected (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_AbsorbN_250 / max(Ray_AbsorbN_250)), label = 'I_emit (N)', marker = 'o')
plt.plot(BeamEnergy,(Ray_DetectN_250 / max(Ray_DetectN_250)), label = 'I_detected (N)', marker = 'o')
plt.legend()

plt.figure(75)
plt.title('Detection of X-Rays 2 (300nm) (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_AbsorbB_300 / max(Ray_AbsorbB_300)), label = 'I_emit (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectB_300 / max(Ray_DetectB_300)), label = 'I_detected (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_AbsorbN_300 / max(Ray_AbsorbN_300)), label = 'I_emit (N)', marker = 'o')
plt.plot(BeamEnergy,(Ray_DetectN_300 / max(Ray_DetectN_300)), label = 'I_detected (N)', marker = 'o')
plt.legend()

plt.figure(8)
plt.title('%Intensity of X-Rays 1 (50nm)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('%Intensity (Arb. Units)')
plt.plot(BeamEnergy,((Ray_DetectAl_50/Ray_AbsorbAl_50)*100), label = '%I (Al)', marker = 'x')
plt.plot(BeamEnergy,((Ray_DetectO_50/Ray_AbsorbO_50)*100), label = '%I (O)', marker = 'o')
plt.legend()

plt.figure(81)
plt.title('%Intensity of X-Rays 1 (100nm)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('%Intensity (Arb. Units)')
plt.plot(BeamEnergy,((Ray_DetectAl_100/Ray_AbsorbAl_100)*100), label = '%I (Al)', marker = 'x')
plt.plot(BeamEnergy,((Ray_DetectO_100/Ray_AbsorbO_100)*100), label = '%I (O)', marker = 'o')
plt.legend()

plt.figure(82)
plt.title('%Intensity of X-Rays 1 (150nm)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('%Intensity (Arb. Units)')
plt.plot(BeamEnergy,((Ray_DetectAl_150/Ray_AbsorbAl_150)*100), label = '%I (Al)', marker = 'x')
plt.plot(BeamEnergy,((Ray_DetectO_150/Ray_AbsorbO_150)*100), label = '%I (O)', marker = 'o')
plt.legend()

plt.figure(83)
plt.title('%Intensity of X-Rays 1 (200nm)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('%Intensity (Arb. Units)')
plt.plot(BeamEnergy,((Ray_DetectAl_200/Ray_AbsorbAl_200)*100), label = '%I (Al)', marker = 'x')
plt.plot(BeamEnergy,((Ray_DetectO_200/Ray_AbsorbO_200)*100), label = '%I (O)', marker = 'o')
plt.legend()

plt.figure(84)
plt.title('%Intensity of X-Rays 1 (250nm)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('%Intensity (Arb. Units)')
plt.plot(BeamEnergy,((Ray_DetectAl_250/Ray_AbsorbAl_250)*100), label = '%I (Al)', marker = 'x')
plt.plot(BeamEnergy,((Ray_DetectO_250/Ray_AbsorbO_250)*100), label = '%I (O)', marker = 'o')
plt.legend()

plt.figure(85)
plt.title('%Intensity of X-Rays 1 (300nm)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('%Intensity (Arb. Units)')
plt.plot(BeamEnergy,((Ray_DetectAl_300/Ray_AbsorbAl_300)*100), label = '%I (Al)', marker = 'x')
plt.plot(BeamEnergy,((Ray_DetectO_300/Ray_AbsorbO_300)*100), label = '%I (O)', marker = 'o')
plt.legend()

plt.figure(9)
plt.title('%Intensity of X-Rays 2 (50nm)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('%Intensity (Arb. Units)')
plt.plot(BeamEnergy,((Ray_DetectB_50/Ray_AbsorbB_50)*100), label = '%I (B)', marker = 'x')
plt.plot(BeamEnergy,((Ray_DetectN_50/Ray_AbsorbN_50)*100), label = '%I (N)', marker = 'o')
plt.legend()

plt.figure(91)
plt.title('%Intensity of X-Rays 2 (100nm)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('%Intensity (Arb. Units)')
plt.plot(BeamEnergy,((Ray_DetectB_100/Ray_AbsorbB_100)*100), label = '%I (B)', marker = 'x')
plt.plot(BeamEnergy,((Ray_DetectN_100/Ray_AbsorbN_100)*100), label = '%I (N)', marker = 'o')
plt.legend()

plt.figure(92)
plt.title('%Intensity of X-Rays 2 (150nm)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('%Intensity (Arb. Units)')
plt.plot(BeamEnergy,((Ray_DetectB_150/Ray_AbsorbB_150)*100), label = '%I (B)', marker = 'x')
plt.plot(BeamEnergy,((Ray_DetectN_150/Ray_AbsorbN_150)*100), label = '%I (N)', marker = 'o')
plt.legend()

plt.figure(93)
plt.title('%Intensity of X-Rays 2 (200nm)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('%Intensity (Arb. Units)')
plt.plot(BeamEnergy,((Ray_DetectB_200/Ray_AbsorbB_200)*100), label = '%I (B)', marker = 'x')
plt.plot(BeamEnergy,((Ray_DetectN_200/Ray_AbsorbN_200)*100), label = '%I (N)', marker = 'o')
plt.legend()

plt.figure(94)
plt.title('%Intensity of X-Rays 2 (250nm)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('%Intensity (Arb. Units)')
plt.plot(BeamEnergy,((Ray_DetectB_250/Ray_AbsorbB_250)*100), label = '%I (B)', marker = 'x')
plt.plot(BeamEnergy,((Ray_DetectN_250/Ray_AbsorbN_250)*100), label = '%I (N)', marker = 'o')
plt.legend()

plt.figure(95)
plt.title('%Intensity of X-Rays 2 (300nm)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('%Intensity (Arb. Units)')
plt.plot(BeamEnergy,((Ray_DetectB_300/Ray_AbsorbB_300)*100), label = '%I (B)', marker = 'x')
plt.plot(BeamEnergy,((Ray_DetectN_300/Ray_AbsorbN_300)*100), label = '%I (N)', marker = 'o')
plt.legend()

plt.figure(100)
plt.title('Detection of X-Rays, Simulation (50nm) Vs Experement (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_DetectB_50 / max(Ray_DetectB_50)), label = 'I_sim (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectN_50 / max(Ray_DetectN_50)), label = 'I_sim (N)', marker = 'o')
plt.plot(WDX_Energy,(L2N/max(L2N)), label = 'LDEL2 (N)', marker = 'o')
plt.plot(WDX_Energy,(L2B/max(L2B)), label = 'LDEL2 (B)', marker = 'x')
plt.plot(WDX_Energy,(L1N / max(L1N)), label = 'LDEL1 (N)', marker = 'o')
plt.legend()

plt.figure(101)
plt.title('Detection of X-Rays, Simulation (100nm) Vs Experement (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_DetectB_100 / max(Ray_DetectB_100)), label = 'I_sim (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectN_100 / max(Ray_DetectN_100)), label = 'I_sim (N)', marker = 'o')
plt.plot(WDX_Energy,(L2N/max(L2N)), label = 'LDEL2 (N)', marker = 'o')
plt.plot(WDX_Energy,(L2B/max(L2B)), label = 'LDEL2 (B)', marker = 'x')
plt.plot(WDX_Energy,(L1N / max(L1N)), label = 'LDEL1 (N)', marker = 'o')
plt.legend()

plt.figure(102)
plt.title('Detection of X-Rays, Simulation (150nm) Vs Experement (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_DetectB_150 / max(Ray_DetectB_150)), label = 'I_sim (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectN_150 / max(Ray_DetectN_150)), label = 'I_sim (N)', marker = 'o')
plt.plot(WDX_Energy,(L2N/max(L2N)), label = 'LDEL2 (N)', marker = 'o')
plt.plot(WDX_Energy,(L2B/max(L2B)), label = 'LDEL2 (B)', marker = 'x')
plt.plot(WDX_Energy,(L1N / max(L1N)), label = 'LDEL1 (N)', marker = 'o')
plt.legend()

plt.figure(103)
plt.title('Detection of X-Rays, Simulation (200nm) Vs Experement (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_DetectB_200 / max(Ray_DetectB_200)), label = 'I_sim (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectN_200 / max(Ray_DetectN_200)), label = 'I_sim (N)', marker = 'o')
plt.plot(WDX_Energy,(L2N/max(L2N)), label = 'LDEL2 (N)', marker = 'o')
plt.plot(WDX_Energy,(L2B/max(L2B)), label = 'LDEL2 (B)', marker = 'x')
plt.plot(WDX_Energy,(L1N / max(L1N)), label = 'LDEL1 (N)', marker = 'o')
plt.legend()

plt.figure(104)
plt.title('Detection of X-Rays, Simulation (250nm) Vs Experement (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_DetectB_250 / max(Ray_DetectB_250)), label = 'I_sim (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectN_250 / max(Ray_DetectN_250)), label = 'I_sim (N)', marker = 'o')
plt.plot(WDX_Energy,(L2N/max(L2N)), label = 'LDEL2 (N)', marker = 'o')
plt.plot(WDX_Energy,(L2B/max(L2B)), label = 'LDEL2 (B)', marker = 'x')
plt.plot(WDX_Energy,(L1N / max(L1N)), label = 'LDEL1 (N)', marker = 'o')
plt.legend()

plt.figure(105)
plt.title('Detection of X-Rays, Simulation (300nm) Vs Experement (Normalised)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_DetectB_300 / max(Ray_DetectB_300)), label = 'I_sim (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectN_300 / max(Ray_DetectN_300)), label = 'I_sim (N)', marker = 'o')
plt.plot(WDX_Energy,(L2N/max(L2N)), label = 'LDEL2 (N)', marker = 'o')
plt.plot(WDX_Energy,(L2B/max(L2B)), label = 'LDEL2 (B)', marker = 'x')
plt.plot(WDX_Energy,(L1N / max(L1N)), label = 'LDEL1 (N)', marker = 'o')
plt.legend()

AvgDelta = (DeltaEDX10 + DeltaEDX1) / 2
AvgDelta = np.delete(AvgDelta,[0,1,5])


plt.figure(15)
plt.title('PETJ Intensites (250nm) (Normalised)')
plt.xlabel('Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(WDX_Energy-AvgDelta,(PET_Al/max(PET_Al)), label = 'PETJ (Al)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectAl_250 / max(Ray_DetectAl_250)), label = 'I_sim (Al)', marker = 'o')
plt.legend()

plt.figure(16)
plt.title('LDEL1 Intensites (250nm) (Normalised)')
plt.xlabel('Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(WDX_Energy-AvgDelta,(L1O/max(L1O)), label = 'LDEL1 (O)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectAl_250 / max(Ray_DetectAl_250)), label = 'I_sim (O)', marker = 'o')
plt.legend()

plt.figure(130)
plt.title('Detection of X-Rays, Simulation (200nm) Vs Experement (Normalised) (Overlayed)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_DetectB_200 / max(Ray_DetectB_200)), label = 'I_sim (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectN_200 / max(Ray_DetectN_200)), label = 'I_sim (N)', marker = 'o')
plt.plot(WDX_Energy-AvgDelta,(L2N/max(L2N)), label = 'LDEL2 (N)', marker = 'o')
plt.plot(WDX_Energy-AvgDelta,(L2B/max(L2B)), label = 'LDEL2 (B)', marker = 'x')
plt.plot(WDX_Energy-AvgDelta,(L1N / max(L1N)), label = 'LDEL1 (N)', marker = 'o')
plt.legend()

plt.figure(131)
plt.title('Detection of X-Rays, Simulation (250nm) Vs Experement (Normalised) (Overlayed)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_DetectB_250 / max(Ray_DetectB_250)), label = 'I_sim (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectN_250 / max(Ray_DetectN_250)), label = 'I_sim (N)', marker = 'o')
plt.plot(WDX_Energy-AvgDelta,(L2N/max(L2N)), label = 'LDEL2 (N)', marker = 'o')
plt.plot(WDX_Energy-AvgDelta,(L2B/max(L2B)), label = 'LDEL2 (B)', marker = 'x')
plt.plot(WDX_Energy-AvgDelta,(L1N / max(L1N)), label = 'LDEL1 (N)', marker = 'o')
plt.legend()

plt.figure(132)
plt.title('Detection of X-Rays, Simulation (300nm) Vs Experement (Normalised) (Overlayed)')
plt.xlabel('Beam Energy (keV)')
plt.ylabel('Intensity (Arb. Units)')
plt.plot(BeamEnergy,(Ray_DetectB_300 / max(Ray_DetectB_300)), label = 'I_sim (B)', marker = 'x')
plt.plot(BeamEnergy,(Ray_DetectN_300 / max(Ray_DetectN_300)), label = 'I_sim (N)', marker = 'o')
plt.plot(WDX_Energy-AvgDelta,(L2N/max(L2N)), label = 'LDEL2 (N)', marker = 'o')
plt.plot(WDX_Energy-AvgDelta,(L2B/max(L2B)), label = 'LDEL2 (B)', marker = 'x')
plt.plot(WDX_Energy-AvgDelta,(L1N / max(L1N)), label = 'LDEL1 (N)', marker = 'o')
plt.legend()